(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{332:function(t,r,e){"use strict";e.r(r);var _=e(1),v=Object(_.a)({},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("div",{staticClass:"content"},[e("p",[t._v("本章节我们做一个总体的梳理以及技术选型。")]),t._v(" "),t._m(0),t._v(" "),e("p",[t._v("首先要区分两个概念：")]),t._v(" "),t._m(1),t._v(" "),e("p",[t._v("微服务架构不一定是分布式的，因为我们可以把所有内容部署在一台服务器上，而分布式也不一定采用微服务架构，比如集群部署。当然，越来越多的人把它们放在一起说，是因为二者的组合已经成为了行业内的最佳实践，是一种默许。")]),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("如何让一系列漂浮在网络中的应用高效的协调工作起来，而且在危急时刻不至于同归于尽，是这门技术的难点所在。")]),t._v(" "),t._m(3),t._v(" "),e("p",[t._v("前端领域，曾经一统江湖的jQuery+Bootstrap组合，在此就不做考虑了，毕竟更新更快的生产工具已经出现。现在来说是大前端技术的时代，react、angular、vue三分天下。至于三大框架哪个更好的争辩，读者可以自行去知乎，那里吵的比较厉害。")]),t._v(" "),e("p",[t._v("这三大框架，笔者都略有涉猎，因为是做后台出身，所以在刚开始学习前端的时候，更钟情于angular，它的依赖注入思想，typescript的强类型，都非常亲切，但奈何angular在国内一直都是不温不火，其热度远不及vue和react。这里说的angular，不是angularJS，angular是一个大而全的集成框架，解决的是mvc的问题，而angularJS和vue、react一样，本身来说只是一个js库，解决的是mvc中的视图层的问题，三者可以脱离其自有的生态，应用在任何前端项目中。举例来说，笔者曾在基于backbone + requireJS + jQuery + bootstrap的项目中使用vue+element开发个别模块。vue、react是与任何前端框架都是松耦合的，可以自由的按需组合开发，而angular，大而全，技术比较锁定，这可能是它在国内水土不服的原因吧。再看react，其生态是最完善，热度最高，但对于jsx这种js与html的混搭，笔者愚钝，真的是难以适应。笔者最后选择对vue进行更深入的学习，vue在国内的热度也是极高的，社区支持非常丰富，学习曲线平缓，上手简单。笔者个人网站就是使用基于vue的vuepress搭建的："),e("a",{attrs:{href:"https://zhuzhaohua.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("zhuzhaohua.com"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("对于三大框架哪个更好，笔者无法给出的答案，喜好因人而异，而且作为十八线程序员，笔者实在是没有什么发言权。网上的支持者们、粉丝们会彼此攻击，可能是因为他们对各自的领域都倾注了心血，但对于笔者而言，即便是牛B上天的框架，也是只是个轮子。")]),t._v(" "),e("p",[t._v("笔者使用vue生态。脚手架模板使用"),e("a",{attrs:{href:"https://github.com/PanJiaChen/vue-element-admin",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/PanJiaChen/vue-element-admin"),e("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),e("p",[t._v("后台其实可选的不是特别多，行业内比较普及的解决方案，也就数spring cloud和dubbo了。二者其实所处领域是略有不同的。spring cloud是工具包，解决的是服务治理、远程调用、集群、负载均衡、服务监控等，一整套的微服务解决方案；而dubbo专注于解决远程调用的问题。二者并不排斥，我们可以在spring cloud项目中的某一个业务模块，使用dubbo。spring cloud基于rest实现远程调用，dubbo是RPC方式。基于rest的话，通用性会更强，但性能明显没有RPC好，建议如果是系统内部调用、或者性能要求比较高的话，使用RPC，如果需要对外暴露服务，尽量使用rest。")]),t._v(" "),t._m(6),t._v(" "),e("p",[t._v("制作中")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),e("p",[t._v("业务模块->结算单模块->凭证模块->支付模块")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15)])},[function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"分布式与微服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分布式与微服务","aria-hidden":"true"}},[this._v("#")]),this._v(" 分布式与微服务")])},function(){var t=this.$createElement,r=this._self._c||t;return r("ul",[r("li",[this._v("分布式架构\n是运维概念。比如我们把一套完整的服务，分成很多模块，部署在不同的服务器上，或者我们把服务复制N份，部署在不同的服务器上做成高可用的集群。分布式所关注的是部署方式。")]),this._v(" "),r("li",[this._v("微服务架构\n是开发方式，我们把一套完整的服务按照业务拆分成很多个小服务，彼此之间的通信是跨进程的。")])])},function(){var t=this.$createElement,r=this._self._c||t;return r("p",[r("strong",[this._v("微服务，是为了扩展；\n分布式，是为了存续")]),this._v("。")])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"技术选型——前端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#技术选型——前端","aria-hidden":"true"}},[this._v("#")]),this._v(" 技术选型——前端")])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"技术选型——后台"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#技术选型——后台","aria-hidden":"true"}},[this._v("#")]),this._v(" 技术选型——后台")])},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ul",[e("li",[t._v("整体解决方案：spring cloud 全家桶")]),t._v(" "),e("li",[t._v("服务层：spring boot\n"),e("ul",[e("li",[t._v("持久层：jpa（hibernate）")]),t._v(" "),e("li",[t._v("数据库: mysql")]),t._v(" "),e("li",[t._v("缓存：redis")])])])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"架构图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#架构图","aria-hidden":"true"}},[this._v("#")]),this._v(" 架构图")])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"服务拆分"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务拆分","aria-hidden":"true"}},[this._v("#")]),this._v(" 服务拆分")])},function(){var t=this.$createElement,r=this._self._c||t;return r("h3",{attrs:{id:"系统模块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#系统模块","aria-hidden":"true"}},[this._v("#")]),this._v(" 系统模块")])},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ul",[e("li",[e("strong",[t._v("用户模块")]),t._v("\n外部模块，应作为单点登录，是所有系统的入口")]),t._v(" "),e("li",[e("strong",[t._v("对象模块")]),t._v("\n外部模块，获取业务上所需的保险人、客户、系统用户等对象的信息")]),t._v(" "),e("li",[e("strong",[t._v("核心模块群")]),t._v("\n收付费系统的中心模块，包括结算单模块、任务模块、凭证模块、支付模块等")]),t._v(" "),e("li",[e("strong",[t._v("业务模块群")]),t._v("\n保费、赔款、手续费等按照不同收付费类型确立的不同模块")])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h3",{attrs:{id:"核心模块群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心模块群","aria-hidden":"true"}},[this._v("#")]),this._v(" 核心模块群")])},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ul",[e("li",[e("strong",[t._v("业务接口模块")]),t._v("\n业务数据、应收应付数据来源、系统对外接口")]),t._v(" "),e("li",[e("strong",[t._v("结算单模块")]),t._v("\n以业务模块数据生成结算单，以备结算")]),t._v(" "),e("li",[e("strong",[t._v("凭证模块")]),t._v(" "),e("strong",[t._v("最最核心")]),t._v("  凭证生成规则、凭证配置、结算、挂账、红冲等核心操作。")]),t._v(" "),e("li",[e("strong",[t._v("支付模块")]),t._v("\n如果是付款操作，在生成凭证后，按照凭证进行线上执行转账汇款")]),t._v(" "),e("li",[e("strong",[t._v("任务模块")]),t._v("\n这里用户的操作，抽象为用户任务;\n系统的定时任务，抽象为系统任务；\n任务模块存在有三个目的：\n"),e("ul",[e("li",[t._v("自动化")]),t._v(" "),e("li",[t._v("作为一个队列，同步转异步，以控制结算单模块、凭证模块的吞吐")]),t._v(" "),e("li",[t._v("直观的显示，当前用户和系统工作的进度")])])]),t._v(" "),e("li",[e("strong",[t._v("资金模块")]),t._v("\n银行、账号、货币等公共资源的配置")])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h3",{attrs:{id:"业务模块群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#业务模块群","aria-hidden":"true"}},[this._v("#")]),this._v(" 业务模块群")])},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ul",[e("li",[t._v("保费模块")]),t._v(" "),e("li",[t._v("赔款模块")]),t._v(" "),e("li",[t._v("手续费模块")]),t._v(" "),e("li",[t._v("共保模块")]),t._v(" "),e("li",[t._v("再保模块")]),t._v(" "),e("li",[t._v("发票模块")])])},function(){var t=this.$createElement,r=this._self._c||t;return r("h2",{attrs:{id:"数据模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据模型","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据模型")])},function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ul",[e("li",[e("strong",[t._v("用户模型")])]),t._v(" "),e("li",[e("strong",[t._v("权限模型")])]),t._v(" "),e("li",[e("strong",[t._v("对象模型")])]),t._v(" "),e("li",[e("strong",[t._v("交易模型")])]),t._v(" "),e("li",[e("strong",[t._v("业务模型")])]),t._v(" "),e("li",[e("strong",[t._v("应收应付模型")])]),t._v(" "),e("li",[e("strong",[t._v("结算单模型")])]),t._v(" "),e("li",[e("strong",[t._v("实收实付模型")])]),t._v(" "),e("li",[e("strong",[t._v("银企直连模型")])]),t._v(" "),e("li",[e("strong",[t._v("发票模型")])]),t._v(" "),e("li",[e("strong",[t._v("凭证模型")])]),t._v(" "),e("li",[e("strong",[t._v("任务模型")])]),t._v(" "),e("li",[e("strong",[t._v("银行模型")])]),t._v(" "),e("li",[e("strong",[t._v("账号模型")])]),t._v(" "),e("li",[e("strong",[t._v("货币模型")])])])}],!1,null,null,null);r.default=v.exports}}]);